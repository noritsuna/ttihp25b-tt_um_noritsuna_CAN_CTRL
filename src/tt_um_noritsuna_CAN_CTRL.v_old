`define default_netname none
`default_nettype none
/*
 * tt_um_noritsuna_CAN_CTRL.v
 *
 * tt_um_noritsuna_CAN_CTRL module
 *
 * Author: Noritsuna Imamura <noritsuna@ishi-kai.org>
 */

module tt_um_noritsuna_CAN_CTRL (
	input  wire [7:0] ui_in,	// Dedicated inputs
	output wire [7:0] uo_out,	// Dedicated outputs
	input  wire [7:0] uio_in,	// IOs: Input path
	output wire [7:0] uio_out,	// IOs: Output path
	output wire [7:0] uio_oe,	// IOs: Enable path (active high: 0=input, 1=output)
	input  wire       ena,
	input  wire       clk,
	input  wire       rst_n
);

	wire			can_tx;
	wire			tx_ing;
	wire [3:0]		can_addr;
	wire [3:0]		transmit_data;
	wire [3:0]		transmit_data_counter;
	wire			can_rx;
	wire			rst;
	wire			send_data;
	wire			can_clk;


	assign			can_tx			=	uo_out[0];
	assign			tx_ing			=	uo_out[1];

	assign			can_rx			=	ui_in[0];
	assign			send_data		=	ui_in[1];
	assign			can_clk			=	ui_in[2];
	assign			can_addr[3:0]	=	ui_in[7:4];

	assign			rst				=	rst_n;

	assign			transmit_data[3:0]			=	uio_in[3:0];
	assign			transmit_data_counter[3:0]	=	uio_in[7:4];
	assign			uio_oe[7:0]	=	8'h00;

	wire _unused = &{ena, clk, ui_in[3], uo_out[2], uo_out[3], uo_out[4], uo_out[5], uo_out[6], uo_out[7], 1'b0};


	CAN_CONTROLLER can_ctrl(
		.CAN_TX(can_tx),
		.TXING(tx_ing),
		.CAN_RX(can_rx),
		.RESET(rst),
		.CLOCK_SIGNAL_IN(can_clk),
		.send_data(send_data),

		.CAN_ADDR(can_addr),
		.transmit_data(transmit_data),
		.transmit_data_counter(transmit_data_counter)
		);


endmodule // tt_um_noritsuna_CAN_CTRL