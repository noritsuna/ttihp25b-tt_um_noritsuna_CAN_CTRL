`define default_netname none
`default_nettype none
/*
 * tt_um_noritsuna_CAN_CTRL.v
 *
 * tt_um_noritsuna_CAN_CTRL module
 *
 * Author: Noritsuna Imamura <noritsuna@ishi-kai.org>
 */

module tt_um_noritsuna_CAN_CTRL (
	input  wire [7:0] ui_in,	// Dedicated inputs
	output wire [7:0] uo_out,	// Dedicated outputs
	input  wire [7:0] uio_in,	// IOs: Input path
	output wire [7:0] uio_out,	// IOs: Output path
	output wire [7:0] uio_oe,	// IOs: Enable path (active high: 0=input, 1=output)
	input  wire       ena,
	input  wire       clk,
	input  wire       rst_n
);

	assign			uio_oe[7:0]	=	8'h00;

	wire _unused = &{ena, clk, ui_in[3], uo_out[2], uo_out[3], uo_out[4], uo_out[5], uo_out[6], uo_out[7], 1'b0};

	wire[10:0] address;
	
	reg[63:0] tx_data;
	reg[15:0] tx_cnt;
	initial tx_cnt = 0;
	reg baud_clk = 0;

	//Device address
	assign address = {7'b0, ui_in[7:4]};
	
	//Baud Clk Generator(currently set for baud of 500kHz)
	BaudGen baud_calc(ui_in[2],rst_n,baud_clk);
	
	//Tx Block
	tx_container tx_can(uo_out[0],uo_out[1],ui_in[0],address,ui_in[2],baud_clk,rst_n,tx_data,ui_in[1]);

	always @ (posedge ui_in[2] or posedge rst_n) begin
		if(rst_n) begin
			tx_data <= 0;
			tx_cnt  <= 0;
		end
		else if(!ui_in[1]) begin
			case(uio_in[7:4])
				4'b0000: tx_data[3:0]   <= uio_in[3:0];
				4'b0001: tx_data[7:4]   <= uio_in[3:0];
				4'b0010: tx_data[11:8]  <= uio_in[3:0];
				4'b0011: tx_data[15:12] <= uio_in[3:0];
				4'b0100: tx_data[19:16] <= uio_in[3:0];
				4'b0101: tx_data[23:20] <= uio_in[3:0];
				4'b0110: tx_data[27:24] <= uio_in[3:0];
				4'b0111: tx_data[31:28] <= uio_in[3:0];
				4'b1000: tx_data[35:32] <= uio_in[3:0];
				4'b1001: tx_data[39:36] <= uio_in[3:0];
				4'b1010: tx_data[43:40] <= uio_in[3:0];
				4'b1011: tx_data[47:44] <= uio_in[3:0];
				4'b1100: tx_data[51:48] <= uio_in[3:0];
				4'b1101: tx_data[55:52] <= uio_in[3:0];
				4'b1110: tx_data[59:56] <= uio_in[3:0];
				4'b1111: tx_data[63:60] <= uio_in[3:0];
				default: tx_data[3:0]   <= uio_in[3:0];
				endcase
		end
		else if(ui_in[1]) begin
			if(!uo_out[1] && tx_cnt > 64*40) begin
				tx_data <= 0;
			end
			tx_cnt <= tx_cnt + 1;
		end
	end

endmodule // tt_um_noritsuna_CAN_CTRL